// 工作区面板的样式

@import "_util";

#js-workspacePanel {
    // 坐标轴线条的颜色
    $line-color: rgba($app-bg, 0.5);
    $active-color: darken(#26A9E0, 5%);
    // 用于展示面板内部box-shadow的元素的z-index
    $panel-shadow-z: 1;
    $bone-ctn-z: $panel-shadow-z + 1;
    $scale-util-height: 20px;
    $scale-util-z: $bone-ctn-z + 1;
    // 缩放坐标轴的按钮的颜色
    $scale-util-color: lighten($app-bg, 5%);
    $scale-util-reset-width: 30px;
    $scale-util-reset-icon-space1: 6px;
    $scale-util-reset-icon-space2: 3px;

    background-color: #fff;
    // z-index为非auto的定位元素，会创建stacking context
    position: relative;
    z-index: 0;

    // 用伪元素做box-shadow，因为直接在#js-workspacePanel元素上做box-shadow的话，
    // 这个box-shadow会位于#js-workspacePanel所创建的stacking context的最低层，
    // 会被用于展示工作区背景图的.js-coordinateSystem::before覆盖
    &::before {
        content: '';
        display: block;
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;
        top: 0;
        @include prefix(box-shadow, inset 0 0 10px #000);
        z-index: $panel-shadow-z;
        // DOUBT: 
        // 不知道为什么，即使这个伪元素跟坐标系背景在一个局部stacking context中，
        // 且伪元素的z-index较小，伪元素还是在坐标系背景的下方，之前有在Chrome下成功过，
        // 但后来不记得改了什么又失败了，期间Chrome有升级，但Chrome和FF都是失败，不确定是Chrome升级导致的
        // TODO: 
        // 1) checkout以前成功的版本，排查失败的原因
        // 2) 确认stacking context的创建机制，写测试例子
        // 目前先用 `pointer-events` 属性兼容
        pointer-events: none;
    }

    #empty_wording {
        display: table;
        width: 100%;
        height: 100%;
        border: 2px dashed #6CAAD5;
        overflow: hidden;
        @include prefixVal(box-sizing, border-box);
        @include prefix(user-select, none);
        color: #6CAAD5;
        font-size: 22px;
    }
    #empty_wording_inner {
        display: table-cell;
        vertical-align: middle;
        text-align: center;
    }

    .js-coordSysScaleUtil {
        $pos: 20px;

        position: absolute;
        left: $pos;
        top: $pos;
        height: $scale-util-height;
        z-index: $panel-shadow-z + 2;
        color: $scale-util-color;
        @extend .clearfix;
        border: 1px solid $scale-util-color;
        @include prefix(border-radius, $border-radius);
    }
    .js-zoomOut,
    .js-currentScale,
    .js-zoomIn {
        padding: 0 5px;
        float: left;
        height: $scale-util-height;
        line-height: $scale-util-height;
    }
    .js-zoomOut,
    .js-zoomIn {
        font-size: 16px;
        cursor: pointer;
        vertical-align: baseline;
    }
    .js-currentScale {
        $unit-width: 10px;
        border-left: 1px solid $scale-util-color;
        border-right: 1px solid $scale-util-color;
        font-size: 13px;

        &::after {
            content: '%';
            display: inline;
            padding-left: 1px;
        }
    }
    .js-reset,
    .reset-icon {
        &::before,
        &::after {
            content: '';
            position: absolute;
            display: block;
            border: 2px solid $scale-util-color;
            width: 4px;
            height: 2px;
        }
    }
    .js-reset {
        position: absolute;
        right: ($scale-util-reset-width + 10px) * -1;
        height: $scale-util-height;
        width: $scale-util-reset-width;
        @include prefix(box-sizing, border-box);
        border: 1px solid $scale-util-color;
        @include prefix(border-radius, $border-radius);
        cursor: pointer;

        &::before {
            left: $scale-util-reset-icon-space1;
            top: $scale-util-reset-icon-space2;
            border-bottom: 0 none;
            border-right: 0 none;
        }
        &::after {
            right: $scale-util-reset-icon-space1;
            top: $scale-util-reset-icon-space2;
            border-bottom: 0 none;
            border-left: 0 none;
        }
    }
    .reset-icon {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;

        &::before {
            left: $scale-util-reset-icon-space1;
            bottom: $scale-util-reset-icon-space2;
            border-top: 0 none;
            border-right: 0 none;
        }
        &::after {
            right: $scale-util-reset-icon-space1;
            bottom: $scale-util-reset-icon-space2;
            border-top: 0 none;
            border-left: 0 none;
        }
    }

    .js-coordinateSystem {
        position: absolute;
        left: 50%;
        top: 50%;
        width: 1px;
        height: 1px;
    }

    .coordinateBg {
        $size: 10000px;

        position: absolute;
        // 保证工作区背景图要在工作区box-shadow的下方，
        // 这里有个隐藏的问题：如果用户设置骨骼的z小于此元素的z-index的话，骨骼就会被背景图覆盖
        // TODO: 用户设置
        z-index: $panel-shadow-z - 1;
        left: $size / -2;
        top: $size / -2;
        width: $size;
        height: $size;
        background-image: url(../img/workspace-bg.png);

        &::before {
            content: '';
            display: block;
            position: absolute;
            top: 50%;
            left: 0;
            width: 100%;
            height: 1px;
            background-color: $line-color;
        }
        &::after {
            content: '';
            display: block;
            position: absolute;
            left: 50%;
            top: 0;
            height: 100%;
            width: 1px;
            background-color: $line-color;
        }
    }

    .js-boneContainer {
        // 创建局部stacking context，使得不管用户设置骨骼的z-index多小，都不会被背景图覆盖
        z-index: $panel-shadow-z + 1;
        position: relative;
    }

    .js-bone {
        // 将z-index显示设置为非auto的定位元素，会创建stacking context
        position: absolute;
        z-index: 0;
        // 新建骨骼的默认位置
        left: 0;
        top: 0;
        background-repeat: no-repeat;
        // 固定纹理图的位置
        background-position: 0 0;
        // 因为要用背景图来显示纹理，所以设置背景图的大小为容器div的大小，
        // 这样就能方便的通过容器的大小来控制纹理图的大小。
        background-size: 100% 100%;
    }

    $active-border-width: 1px;
    $active-border-offset: $active-border-width / 2;
    @if $active-border-offset <= 1px {
        $active-border-offset: 1px;
    }
    .js-activeBone {
        cursor: move;

        &::before{
            content: "";
            display: block;
            position: absolute;
            left: -1 * $active-border-offset;
            top: -1 * $active-border-offset;
            width: 100%;
            height: 100%;
            border: $active-border-width solid rgba($active-color, 0.5);
        }
    }

    .js-joint {
        $size: 8px;
        position: absolute;
        width: $size;
        height: $size;
        margin-left: $size / -2;
        margin-top: $size / -2;
        background-color: rgba(darken($active-color, 5%), 0.5);
        @include prefix(border-radius, $size / 2);
    }

    $rotate-size: 26px;
    $rotate-pos: $rotate-size / -2 - 2;
    .rotate {
        position: absolute;
        //visibility: hidden;
        width: $rotate-size;
        height: $rotate-size;
        cursor: url(../img/refresh.png), auto;
        background-color: rgba(0, 0, 0, 0);
    }
    .rotate1 {
        left: $rotate-pos;
        top: $rotate-pos;
    }
    .rotate2 {
        right: $rotate-pos;
        top: $rotate-pos;
        // 如果用双向箭头，旋转的过程中双向箭头要跟着旋转才能表示正确的意思
        // cursor: url(../img/rotate2.png), auto;
    }
    .rotate3 {
        left: $rotate-pos;
        bottom: $rotate-pos;
    }
    .rotate4 {
        right: $rotate-pos;
        bottom: $rotate-pos;
    }

    $resize-offset: 2px;
    $resize-size: $rotate-size + $rotate-pos + $resize-offset;
    .resize {
        position: absolute;
        width: $resize-size;
        height: $resize-size;
        // @include prefix(border-radius, $resize-size / 2);

        &::before {
            content: "";
            display: block;
            position: absolute;
            width: 6px;
            height: 6px;
            border: 1px solid rgba(darken($active-color, 5%), 0.5);
            background-color: #fff;
        }
    }
    .resize1 {
        right: 0;
        bottom: 0;
        cursor: nw-resize;
        &::before {
            left: $resize-offset * -1;
            top: $resize-offset * -1;
        }
    }
    .resize2 {
        left: 0;
        bottom: 0;
        cursor: sw-resize;
        &::before {
            right: $resize-offset * -1;
            top: $resize-offset * -1;
        }
    }
    .resize3 {
        right: 0;
        top: 0;
        cursor: sw-resize;
        &::before {
            left: $resize-offset * -1;
            bottom: $resize-offset * -1;
        }
    }
    .resize4 {
        left: 0;
        top: 0;
        cursor: nw-resize;
        &::before {
            right: $resize-offset * -1;
            bottom: $resize-offset * -1;
        }
    }
    .js-activeBone::before,
    .js-transform-util {
        // 使其衬在非激活骨骼的下方
        z-index: -1;
    }

} // end of workspace panel
